# -*- coding: utf-8 -*-
"""Trackvision.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oToX3bYWsz7Wn8Uw_jabQ2LPUZooFCCg
"""

#main code
import cv2
import torch
!pip install deep_sort_realtime
!pip install ultralytics
from ultralytics import YOLO
from deep_sort_realtime.deepsort_tracker import DeepSort
import numpy as np

model = YOLO("yolov8s.pt")
deepsort = DeepSort(max_age=30)

video_path = 'tk_.mp4'
cap = cv2.VideoCapture(video_path)

frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
fps = cap.get(cv2.CAP_PROP_FPS)

output_path = 'output_video.mp4'
fourcc = cv2.VideoWriter_fourcc(*'mp4v')
out = cv2.VideoWriter(output_path, fourcc, fps, (frame_width, frame_height))

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    results = model(frame)

    boxes = results.xywh[0][:, :4].cpu().numpy()
    confidences = results.xywh[0][:, 4].cpu().numpy()
    class_ids = results.xywh[0][:, 5].cpu().numpy().astype(int)
    class_names = results.names

    detections = []
    for i, box in enumerate(boxes):
        if confidences[i] > 0.5:
            detection = np.array([box[0], box[1], box[2], box[3]])
            detections.append([detection, confidences[i], class_ids[i]])

    tracks = deepsort.update_tracks(detections, frame=frame)

    for track in tracks:
        if track.is_confirmed():
            bbox = track.to_tlbr()
            track_id = track.track_id
            cv2.rectangle(frame, (int(bbox[0]), int(bbox[1])), (int(bbox[2]), int(bbox[3])), (255, 0, 0), 2)
            cv2.putText(frame, f"ID: {track_id}", (int(bbox[0]), int(bbox[1])-10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)

    out.write(frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
out.release()
cv2.destroyAllWindows()

import csv

with open('tracking_log.csv', mode='w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(['Frame', 'Track ID', 'Class', 'X1', 'Y1', 'X2', 'Y2'])


    for track in tracks:
        if track.is_confirmed():
            bbox = track.to_tlbr()
            track_id = track.track_id
            class_name = class_names[class_ids[0]]
            writer.writerow([frame_count, track_id, class_name, bbox[0], bbox[1], bbox[2], bbox[3]])

#working code
import cv2
import torch
!pip install deep_sort_realtime
!pip install ultralytics
from ultralytics import YOLO
from deep_sort_realtime.deepsort_tracker import DeepSort
import numpy as np

model = YOLO("yolov8s.pt")

deepsort = DeepSort(max_age=30)

video_path = 'tk_.mp4'
cap = cv2.VideoCapture(video_path)

frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
fps = cap.get(cv2.CAP_PROP_FPS)

output_path = 'output_video.mp4'
fourcc = cv2.VideoWriter_fourcc(*'mp4v')
out = cv2.VideoWriter(output_path, fourcc, fps, (frame_width, frame_height))

with open('tracking_log.csv', mode='w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(['Frame', 'Track ID', 'Class', 'X1', 'Y1', 'X2', 'Y2'])  # Write headers

    frame_count = 0

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        frame_count += 1  # Increment frame count


        results = model(frame)

        boxes = results.xywh[0][:, :4].cpu().numpy()
        confidences = results.xywh[0][:, 4].cpu().numpy()
        class_ids = results.xywh[0][:, 5].cpu().numpy().astype(int)
        class_names = results.names

        detections = []
        for i, box in enumerate(boxes):
            if confidences[i] > 0.5:
                detection = np.array([box[0], box[1], box[2], box[3]])
                detections.append([detection, confidences[i], class_ids[i]])

        tracks = deepsort.update_tracks(detections, frame=frame)

        for track in tracks:
            if track.is_confirmed():
                bbox = track.to_tlbr()
                track_id = track.track_id
                class_name = class_names[class_ids[0]]

                writer.writerow([frame_count, track_id, class_name, bbox[0], bbox[1], bbox[2], bbox[3]])

                cv2.rectangle(frame, (int(bbox[0]), int(bbox[1])), (int(bbox[2]), int(bbox[3])), (255, 0, 0), 2)
                cv2.putText(frame, f"ID: {track_id}", (int(bbox[0]), int(bbox[1])-10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)

        out.write(frame)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

cap.release()
out.release()
cv2.destroyAllWindows()

!pip install ultralytics deep_sort_realtime opencv-python-headless numpy pandas

